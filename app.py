"""
Dashboard √âco-√âvaluation des Expositions Culturelles
Point d'entr√©e principal de l'application Streamlit - Version corrig√©e NumPy
Repo: https://github.com/MarcRenard/deja-vu
"""

import streamlit as st
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime
import os
import sys
import warnings

# Supprimer les warnings de compatibilit√©
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore', category=UserWarning)

# Ajouter le dossier src au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Configuration de la page Streamlit
st.set_page_config(
    page_title="√âco-√âvaluation Expositions - D√©j√† Vu",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    color: #2E7D32;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-card {
    background-color: #f0f8ff;
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #2E7D32;
}
.section-header {
    color: #1976D2;
    border-bottom: 2px solid #1976D2;
    padding-bottom: 0.5rem;
}
.questionnaire-card {
    background: linear-gradient(135deg, #E8F5E8 0%, #C8E6C9 100%);
    padding: 2rem;
    border-radius: 15px;
    border: 1px solid #4CAF50;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

def create_dummy_dashboard():
    """Cr√©er un dashboard dummy pour tester l'interface"""

    st.markdown('<h1 class="main-header">üå± Dashboard √âco-√âvaluation</h1>', unsafe_allow_html=True)

    # Informations sur le d√©veloppement
    col1, col2 = st.columns([3, 1])

    with col1:
        st.info("‚úÖ **Phase 2 impl√©ment√©e** : Questionnaire complet avec validation des donn√©es")

    with col2:
        if st.button("üÜï Nouvelle √©valuation", type="primary", use_container_width=True):
            st.session_state.current_page = "questionnaire"
            st.rerun()

    st.divider()

    # M√©triques principales (dummy data)
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="Empreinte Carbone",
            value="2.4 t CO‚ÇÇeq",
            delta="-0.3 vs moyenne"
        )

    with col2:
        st.metric(
            label="Score √âco-Social",
            value="7.8/10",
            delta="1.2"
        )

    with col3:
        st.metric(
            label="Mat√©riaux Recycl√©s",
            value="65%",
            delta="15%"
        )

    with col4:
        st.metric(
            label="√ânergie Renouvelable",
            value="80%",
            delta="10%"
        )

    st.divider()

    # Graphiques dummy
    col1, col2 = st.columns(2)

    with col1:
        st.markdown('<h3 class="section-header">Impact par Cat√©gorie</h3>', unsafe_allow_html=True)

        # Donn√©es dummy pour graphique radar
        categories = ['Mat√©riaux', '√ânergie', 'Transport', 'D√©chets', '√âco-Social']
        scores = [7.2, 8.1, 6.5, 7.8, 8.3]

        # Cr√©er un graphique en barres horizontal
        df_categories = pd.DataFrame({
            'Cat√©gorie': categories,
            'Score': scores
        })

        fig_bar = px.bar(
            df_categories,
            x='Score',
            y='Cat√©gorie',
            orientation='h',
            color='Score',
            color_continuous_scale='RdYlGn',
            title="Scores par Cat√©gorie d'Impact"
        )
        fig_bar.update_layout(height=400)
        st.plotly_chart(fig_bar, use_container_width=True)

    with col2:
        st.markdown('<h3 class="section-header">√âvolution Temporelle</h3>', unsafe_allow_html=True)

        # Donn√©es dummy pour s√©rie temporelle - CORRECTION du warning
        dates = pd.date_range(start='2023-01-01', end='2024-01-01', freq='ME')  # 'ME' au lieu de 'M'
        co2_data = 2.4 + np.random.normal(0, 0.2, len(dates)).cumsum() * 0.1

        df_temporal = pd.DataFrame({
            'Date': dates,
            'Empreinte CO‚ÇÇ (t)': co2_data
        })

        fig_line = px.line(
            df_temporal,
            x='Date',
            y='Empreinte CO‚ÇÇ (t)',
            title="√âvolution de l'Empreinte Carbone",
            markers=True
        )
        fig_line.update_traces(line_color='#2E7D32')
        fig_line.update_layout(height=400)
        st.plotly_chart(fig_line, use_container_width=True)

    # Section des √©valuations
    st.markdown('<h3 class="section-header">√âvaluations R√©centes</h3>', unsafe_allow_html=True)

    # V√©rifier s'il y a une √©valuation en cours
    if 'current_evaluation' in st.session_state and st.session_state.current_evaluation:
        evaluation = st.session_state.current_evaluation

        st.markdown('<div class="questionnaire-card">', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("√âvaluation en cours", evaluation.metadata.name)
        with col2:
            st.metric("Progression", f"{evaluation.completion_percentage:.0f}%")
        with col3:
            st.metric("Statut", evaluation.status.title())
        with col4:
            if st.button("üìù Continuer", type="primary", use_container_width=True):
                st.session_state.current_page = "questionnaire"
                st.rerun()

        st.markdown('</div>', unsafe_allow_html=True)

    # Tableau dummy des √©valuations - Version simplifi√©e pour √©viter pyarrow
    st.markdown("### üìä Historique des √©valuations")

    # Affichage simple sans st.dataframe pour √©viter pyarrow
    evaluation_data = [
        {"Date": "2024-01-15", "Exposition": "Art Contemporain 2024", "Score": 7.8, "CO‚ÇÇ": "2.4t", "Statut": "‚úÖ Compl√©t√©"},
        {"Date": "2024-01-10", "Exposition": "Histoire Locale", "Score": 6.9, "CO‚ÇÇ": "3.1t", "Statut": "üîÑ En cours"},
        {"Date": "2024-01-05", "Exposition": "Sciences & Nature", "Score": 8.2, "CO‚ÇÇ": "1.8t", "Statut": "‚úÖ Compl√©t√©"}
    ]

    for eval_data in evaluation_data:
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            st.write(eval_data["Date"])
        with col2:
            st.write(eval_data["Exposition"])
        with col3:
            st.write(f"‚≠ê {eval_data['Score']}/10")
        with col4:
            st.write(f"üåç {eval_data['CO‚ÇÇ']}")
        with col5:
            st.write(eval_data["Statut"])

def show_questionnaire_page():
    """Afficher la page du questionnaire"""
    try:
        from questionnaire.questionnaire_main import run_questionnaire_page
        run_questionnaire_page()
    except ImportError as e:
        st.error("‚ùå Erreur d'importation du module questionnaire")
        st.error(f"D√©tail : {str(e)}")

        # Fallback vers l'ancien placeholder
        st.markdown('<h1 class="main-header">üìã Questionnaire d\'√âvaluation</h1>', unsafe_allow_html=True)

        st.warning("üöß **Module questionnaire en cours de finalisation**")

        st.markdown("""
        ### ‚úÖ Fonctionnalit√©s impl√©ment√©es :

        **1. Mod√®les de donn√©es complets**
        - Validation Pydantic des r√©ponses
        - 93 crit√®res d'√©valuation structur√©s
        - Types de questions multiples (num√©rique, √©chelle, choix multiples...)

        **2. G√©n√©rateur de formulaires dynamiques**
        - Rendu automatique selon le type de question
        - Validation en temps r√©el
        - Interface responsive

        **3. Interface utilisateur compl√®te**
        - Navigation par sections
        - Sauvegarde automatique
        - Indicateurs de progression
        - Gestion des erreurs
        """)

        if st.button("üè† Retour au Dashboard", type="primary"):
            st.session_state.current_page = "dashboard"
            st.rerun()

def show_about_page():
    """Afficher la page √Ä propos"""
    st.markdown('<h1 class="main-header">‚ÑπÔ∏è √Ä propos</h1>', unsafe_allow_html=True)

    st.markdown("""
    ## Dashboard d'√âco-√âvaluation des Expositions Culturelles

    Cette application permet d'√©valuer l'impact environnemental et √©co-social
    des expositions culturelles et des mus√©es selon les standards internationaux.

    ### ‚úÖ Phase 2 - Questionnaire (Actuelle) :
    - üìã **93 crit√®res d'√©valuation** organis√©s en 5 cat√©gories
    - üîß **Mod√®les de donn√©es robustes** avec validation Pydantic
    - üìù **Interface de questionnaire** dynamique et intuitive
    - üíæ **Sauvegarde automatique** des r√©ponses en cours
    - ‚úÖ **Validation en temps r√©el** des saisies

    ### Fonctionnalit√©s :
    - üìä **Dashboard interactif** avec visualisations avanc√©es
    - üíæ **Sauvegarde** et historique des √©valuations
    - üìà **Comparaisons** et benchmarks sectoriels
    - üìë **Export** PDF et Excel des r√©sultats (√† venir)

    ### Normes de r√©f√©rence :
    - **ISO 14001** : Management environnemental
    - **ISO 26000** : Responsabilit√© soci√©tale
    - **ADEME** : Bilan carbone et m√©thodes de calcul
    - **Loi fran√ßaise 2005** : Accessibilit√© universelle

    ### D√©velopp√© avec :
    - üêç Python & Streamlit
    - üìä Plotly & Pandas
    - üî¨ Pydantic pour la validation des donn√©es
    - üé® Interface Material Design
    """)

    # Statistiques du projet
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Questions", "93", help="Nombre total de crit√®res d'√©valuation")
    with col2:
        st.metric("Cat√©gories", "5", help="Cat√©gories principales d'impact")
    with col3:
        st.metric("Types de questions", "6", help="Types de widgets de saisie")

    st.info("üöß **Version de d√©veloppement** - Phase 3 (Calculs et m√©triques) en pr√©paration.")

def main():
    """Fonction principale de l'application"""

    # Initialiser l'√©tat de la page
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"

    # Sidebar pour navigation
    with st.sidebar:
        st.markdown("### Navigation")

        # Navigation avec boutons radio
        selected_page = st.radio(
            "Choisir une section:",
            ["dashboard", "questionnaire", "about"],
            format_func=lambda x: {
                "dashboard": "üè† Dashboard",
                "questionnaire": "üìã Questionnaire",
                "about": "‚ÑπÔ∏è √Ä propos"
            }[x],
            index=["dashboard", "questionnaire", "about"].index(st.session_state.current_page)
        )

        # Mettre √† jour la page si changement
        if selected_page != st.session_state.current_page:
            st.session_state.current_page = selected_page
            st.rerun()

        st.divider()

        # Actions rapides
        st.markdown("### Actions rapides")

        if st.button("‚ûï Nouvelle √©valuation", use_container_width=True):
            st.session_state.current_page = "questionnaire"
            # R√©initialiser l'√©valuation pour en cr√©er une nouvelle
            if 'current_evaluation' in st.session_state:
                st.session_state.current_evaluation = None
            st.rerun()

        if st.button("üìä Dashboard", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.rerun()

        st.divider()

        # Informations syst√®me
        st.markdown("### Informations")
        st.caption(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        st.caption("üîß Version 1.1.0 (Phase 2)")

        # Statut du questionnaire
        if 'current_evaluation' in st.session_state and st.session_state.current_evaluation:
            st.success("üìù √âvaluation en cours")
            completion = st.session_state.current_evaluation.completion_percentage
            st.progress(completion / 100.0)
            st.caption(f"Progression : {completion:.0f}%")
        else:
            st.info("‚ú® Pr√™t pour nouvelle √©valuation")

    # Contenu principal selon la page s√©lectionn√©e
    if st.session_state.current_page == "dashboard":
        create_dummy_dashboard()

    elif st.session_state.current_page == "questionnaire":
        show_questionnaire_page()

    elif st.session_state.current_page == "about":
        show_about_page()

# Point d'entr√©e de l'application
if __name__ == "__main__":
    main()
