"""
Interface principale du questionnaire d'√©valuation
Point d'entr√©e pour la saisie des donn√©es
"""

import streamlit as st
from typing import Dict, Any, Optional, List
from datetime import datetime, date
import sys
import os

# Ajout du chemin pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.criteria import EVALUATION_CRITERIA, get_questions_by_category
from data.models import (
    Evaluation, ExhibitionMetadata, ExhibitionType,
    EvaluationStatus, CategoryResponse, SubCategoryResponse, QuestionResponse
)
from questionnaire.forms import QuestionnaireUI, SectionRenderer, QuestionnaireValidator

class QuestionnaireManager:
    """Gestionnaire principal du questionnaire"""

    def __init__(self):
        self.ui = QuestionnaireUI()
        self.section_renderer = SectionRenderer()
        self.validator = QuestionnaireValidator()

        # Initialiser la session si n√©cessaire
        if 'questionnaire_session' not in st.session_state:
            st.session_state.questionnaire_session = {}
        if 'current_evaluation' not in st.session_state:
            st.session_state.current_evaluation = None

    def run_questionnaire(self):
        """Point d'entr√©e principal pour le questionnaire"""

        # V√©rifier s'il faut cr√©er une nouvelle √©valuation ou continuer une existante
        if st.session_state.current_evaluation is None:
            self._show_evaluation_setup()
        else:
            self._show_main_questionnaire()

    def _show_evaluation_setup(self):
        """Afficher l'interface de configuration d'une nouvelle √©valuation"""

        st.markdown("# üÜï Nouvelle √âvaluation")
        st.markdown("Commencez par renseigner les informations g√©n√©rales de votre exposition.")

        with st.form("evaluation_setup"):
            st.markdown("## Informations g√©n√©rales")

            col1, col2 = st.columns(2)

            with col1:
                name = st.text_input(
                    "Nom de l'exposition *",
                    placeholder="Ex: Art Contemporain 2024"
                )
                venue = st.text_input(
                    "Lieu *",
                    placeholder="Ex: Mus√©e d'Art Moderne"
                )
                city = st.text_input(
                    "Ville",
                    placeholder="Ex: Paris"
                )

            with col2:
                exhibition_type = st.selectbox(
                    "Type d'exposition *",
                    options=list(ExhibitionType),
                    format_func=lambda x: self._format_exhibition_type(x)
                )
                start_date = st.date_input("Date de d√©but *")
                end_date = st.date_input("Date de fin (optionnel)")

            st.markdown("## Informations d√©taill√©es (optionnel)")

            col1, col2, col3 = st.columns(3)

            with col1:
                surface_area = st.number_input(
                    "Surface (m¬≤)",
                    min_value=0.0,
                    value=0.0,
                    step=10.0
                )

            with col2:
                estimated_visitors = st.number_input(
                    "Visiteurs estim√©s",
                    min_value=0,
                    value=0,
                    step=100
                )

            with col3:
                budget = st.number_input(
                    "Budget (‚Ç¨)",
                    min_value=0.0,
                    value=0.0,
                    step=1000.0
                )

            description = st.text_area(
                "Description de l'exposition",
                placeholder="D√©crivez bri√®vement l'exposition, ses th√®mes, objectifs...",
                max_chars=1000
            )

            # Informations de contact
            st.markdown("## Contact")

            col1, col2, col3 = st.columns(3)

            with col1:
                evaluator_name = st.text_input("Votre nom")
            with col2:
                evaluator_email = st.text_input("Votre email")
            with col3:
                evaluator_organization = st.text_input("Organisation")

            submitted = st.form_submit_button("üöÄ Commencer l'√©valuation", use_container_width=True, type="primary")

            if submitted:
                # Validation des champs obligatoires
                errors = []

                if not name.strip():
                    errors.append("Le nom de l'exposition est obligatoire")
                if not venue.strip():
                    errors.append("Le lieu est obligatoire")
                if end_date and end_date < start_date:
                    errors.append("La date de fin doit √™tre post√©rieure √† la date de d√©but")

                if errors:
                    for error in errors:
                        st.error(error)
                else:
                    # Cr√©er l'√©valuation
                    self._create_new_evaluation(
                        name=name,
                        venue=venue,
                        city=city,
                        exhibition_type=exhibition_type,
                        start_date=start_date,
                        end_date=end_date,
                        surface_area=surface_area if surface_area > 0 else None,
                        estimated_visitors=estimated_visitors if estimated_visitors > 0 else None,
                        budget=budget if budget > 0 else None,
                        description=description if description.strip() else None,
                        evaluator_name=evaluator_name if evaluator_name.strip() else None,
                        evaluator_email=evaluator_email if evaluator_email.strip() else None,
                        evaluator_organization=evaluator_organization if evaluator_organization.strip() else None
                    )

    def _create_new_evaluation(self, **kwargs):
        """Cr√©er une nouvelle √©valuation avec les m√©tadonn√©es"""

        try:
            metadata = ExhibitionMetadata(**kwargs)
            evaluation = Evaluation(metadata=metadata)

            st.session_state.current_evaluation = evaluation
            st.session_state.questionnaire_session = {
                'current_category': list(EVALUATION_CRITERIA.keys())[0],
                'start_time': datetime.now()
            }

            st.success("‚úÖ √âvaluation cr√©√©e avec succ√®s !")
            st.rerun()

        except Exception as e:
            st.error(f"Erreur lors de la cr√©ation de l'√©valuation : {str(e)}")

    def _show_main_questionnaire(self):
        """Afficher l'interface principale du questionnaire"""

        evaluation = st.session_state.current_evaluation

        # Header avec informations de l'√©valuation
        self.ui.render_questionnaire_header(evaluation.metadata.dict())

        # Navigation par cat√©gorie
        categories = list(EVALUATION_CRITERIA.keys())

        # S√©lecteur de cat√©gorie dans le contenu principal
        current_category = st.session_state.questionnaire_session.get('current_category', categories[0])

        # Navigation dans la sidebar
        with st.sidebar:
            st.markdown("### Navigation")

            # S√©lecteur de cat√©gorie
            selected_category = st.radio(
                "Sections :",
                categories,
                index=categories.index(current_category),
                format_func=lambda x: self._get_category_display_name(x)
            )

            # Mettre √† jour la cat√©gorie courante
            if selected_category != current_category:
                st.session_state.questionnaire_session['current_category'] = selected_category
                st.rerun()

            st.divider()

            # Indicateurs de progression
            self._show_progress_indicators(evaluation)

            st.divider()

            # Actions rapides
            st.markdown("### Actions")

            if st.button("üíæ Sauvegarder", use_container_width=True):
                self._save_evaluation()

            if st.button("üè† Retour au dashboard", use_container_width=True):
                self._return_to_dashboard()

            if st.button("üóëÔ∏è Nouvelle √©valuation", use_container_width=True):
                self._reset_evaluation()

        # Contenu principal : formulaire de la cat√©gorie courante
        current_category = st.session_state.questionnaire_session['current_category']
        self._render_category_form(current_category)

        # Navigation entre cat√©gories
        self._render_category_navigation(categories, current_category)

        # Footer du questionnaire
        self.ui.render_questionnaire_footer()

    def _render_category_form(self, category_id: str):
        """Rendre le formulaire d'une cat√©gorie"""

        # R√©cup√©rer les r√©ponses actuelles pour cette cat√©gorie
        evaluation = st.session_state.current_evaluation
        current_responses = {}

        if category_id in evaluation.responses:
            category_response = evaluation.responses[category_id]
            # Convertir en format pour le renderer
            for subcategory_id, subcategory in category_response.subcategories.items():
                current_responses[subcategory_id] = {
                    q_id: q.value for q_id, q in subcategory.questions.items()
                }

        # Rendre le formulaire
        with st.form(key=f"form_{category_id}", clear_on_submit=False):
            responses = self.section_renderer.render_category_section(
                category_id,
                current_responses
            )

            col1, col2, col3 = st.columns([1, 1, 2])

            with col1:
                submitted = st.form_submit_button("üíæ Sauvegarder cette section", type="primary")

            with col2:
                draft_saved = st.form_submit_button("üìù Sauvegarder brouillon")

            with col3:
                if st.form_submit_button("‚û°Ô∏è Section suivante"):
                    self._go_to_next_category(category_id)

            if submitted or draft_saved:
                self._save_category_responses(category_id, responses)
                if submitted:
                    st.success("‚úÖ R√©ponses sauvegard√©es avec succ√®s !")
                else:
                    st.info("üìù Brouillon sauvegard√©")

    def _save_category_responses(self, category_id: str, responses: Dict[str, Dict[str, Any]]):
        """Sauvegarder les r√©ponses d'une cat√©gorie"""

        evaluation = st.session_state.current_evaluation

        # Cr√©er la CategoryResponse
        category_response = CategoryResponse(category_id=category_id)

        # Traiter chaque sous-cat√©gorie
        for subcategory_id, subcategory_responses in responses.items():
            subcategory_response = SubCategoryResponse(subcategory_id=subcategory_id)

            # Traiter chaque question
            for question_id, response_value in subcategory_responses.items():
                if response_value is not None:  # Ignorer les r√©ponses vides
                    question_response = QuestionResponse(
                        question_id=question_id,
                        value=response_value,
                        updated_at=datetime.now()
                    )
                    subcategory_response.add_response(question_id, question_response)

            category_response.add_subcategory_response(subcategory_id, subcategory_response)

        # Ajouter √† l'√©valuation
        evaluation.add_category_response(category_id, category_response)

        # Mettre √† jour la session
        st.session_state.current_evaluation = evaluation

    def _show_progress_indicators(self, evaluation: Evaluation):
        """Afficher les indicateurs de progression"""

        st.markdown("### Progression")

        # Progression globale
        overall_progress = evaluation.completion_percentage
        st.progress(overall_progress / 100.0)
        st.caption(f"Global : {overall_progress:.0f}%")

        st.markdown("### D√©tail par section")

        # Progression par cat√©gorie
        for category_id in EVALUATION_CRITERIA.keys():
            category_name = self._get_category_display_name(category_id)
            completion = evaluation.get_category_completion(category_id)

            col1, col2 = st.columns([3, 1])

            with col1:
                st.caption(category_name)
            with col2:
                if completion >= 90:
                    st.success(f"‚úÖ {completion:.0f}%")
                elif completion >= 50:
                    st.warning(f"üü° {completion:.0f}%")
                elif completion > 0:
                    st.info(f"üîµ {completion:.0f}%")
                else:
                    st.error(f"‚ùå {completion:.0f}%")

    def _render_category_navigation(self, categories: List[str], current_category: str):
        """Rendre la navigation entre cat√©gories"""

        st.divider()

        col1, col2, col3 = st.columns([1, 2, 1])

        # Bouton pr√©c√©dent
        with col1:
            current_index = categories.index(current_category)
            if current_index > 0:
                if st.button("‚¨ÖÔ∏è Section pr√©c√©dente", use_container_width=True):
                    st.session_state.questionnaire_session['current_category'] = categories[current_index - 1]
                    st.rerun()

        # Indicateur de position
        with col2:
            st.markdown(f"**Section {current_index + 1} sur {len(categories)}**")
            progress = (current_index + 1) / len(categories)
            st.progress(progress)

        # Bouton suivant
        with col3:
            if current_index < len(categories) - 1:
                if st.button("Section suivante ‚û°Ô∏è", use_container_width=True):
                    st.session_state.questionnaire_session['current_category'] = categories[current_index + 1]
                    st.rerun()
            else:
                if st.button("‚úÖ Finaliser", use_container_width=True, type="primary"):
                    self._finalize_evaluation()

    def _go_to_next_category(self, current_category: str):
        """Aller √† la cat√©gorie suivante"""
        categories = list(EVALUATION_CRITERIA.keys())
        current_index = categories.index(current_category)

        if current_index < len(categories) - 1:
            st.session_state.questionnaire_session['current_category'] = categories[current_index + 1]
            st.rerun()

    def _save_evaluation(self):
        """Sauvegarder l'√©valuation actuelle"""
        # TODO: Impl√©menter la sauvegarde persistante
        st.success("üíæ √âvaluation sauvegard√©e")
        st.info("La sauvegarde persistante sera impl√©ment√©e dans la prochaine phase")

    def _return_to_dashboard(self):
        """Retourner au dashboard"""
        # Sauvegarder automatiquement avant de quitter
        self._save_evaluation()

        # Reset des √©tats pour retourner au dashboard
        st.session_state.questionnaire_active = False
        st.rerun()

    def _reset_evaluation(self):
        """R√©initialiser pour cr√©er une nouvelle √©valuation"""
        if st.checkbox("Je confirme vouloir abandonner l'√©valuation actuelle"):
            st.session_state.current_evaluation = None
            st.session_state.questionnaire_session = {}
            st.rerun()

    def _finalize_evaluation(self):
        """Finaliser l'√©valuation"""
        evaluation = st.session_state.current_evaluation
        evaluation.status = EvaluationStatus.COMPLETED
        evaluation.completed_at = datetime.now()

        st.success("üéâ √âvaluation finalis√©e avec succ√®s !")
        st.balloons()

        st.info("Vous pouvez maintenant consulter vos r√©sultats dans le dashboard.")

        # Proposer d'aller au dashboard
        if st.button("üìä Voir les r√©sultats", type="primary"):
            self._return_to_dashboard()

    def _get_category_display_name(self, category_id: str) -> str:
        """Obtenir le nom d'affichage d'une cat√©gorie"""
        category_config = get_questions_by_category(category_id)
        if category_config:
            title = category_config.get('title', category_id)
            # Raccourcir si trop long
            if len(title) > 30:
                return title[:27] + "..."
            return title
        return category_id.replace('_', ' ').title()

    def _format_exhibition_type(self, exhibition_type: ExhibitionType) -> str:
        """Formater le type d'exposition pour l'affichage"""
        type_labels = {
            ExhibitionType.SMALL_MUSEUM: "Petit mus√©e",
            ExhibitionType.LARGE_MUSEUM: "Grand mus√©e",
            ExhibitionType.TEMPORARY_EXHIBITION: "Exposition temporaire",
            ExhibitionType.OUTDOOR_EXHIBITION: "Exposition ext√©rieure",
            ExhibitionType.TRAVELING_EXHIBITION: "Exposition itin√©rante",
            ExhibitionType.VIRTUAL_EXHIBITION: "Exposition virtuelle"
        }
        return type_labels.get(exhibition_type, exhibition_type.value)

# Fonction principale pour int√©grer dans l'app
def run_questionnaire_page():
    """Point d'entr√©e pour la page questionnaire"""

    # V√©rifier si le questionnaire est activ√©
    if 'questionnaire_active' not in st.session_state:
        st.session_state.questionnaire_active = False

    # Cr√©er et lancer le gestionnaire
    manager = QuestionnaireManager()
    manager.run_questionnaire()
